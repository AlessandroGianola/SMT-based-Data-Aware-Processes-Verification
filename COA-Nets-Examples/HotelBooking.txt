:comment Hotel-Booking

:index int


:comment ----- TYPES DESCLARATIONS -------

:smt (define-type HName) 
:smt (define-type Rid) 
:smt (define-type Bool)
:smt (define-type String)
:comment ---------- FUNCTIONS and PREDICATES -----------


:smt (define RidHName ::(-> Rid HName))
:smt (define RidType ::(-> Rid String))





:smt (define TRUE ::Bool)
:smt (define FALSE ::Bool)


:db_driven 
:db_sorts HName Rid Bool String
:db_functions RidType RidHName 
:db_constants  TRUE FALSE
:db_relations 


:local BookedRooms_1 Rid
:local BookedRooms_2 HName
:local BookedRooms_3 String
:local p3_1 Rid
:local p3_2 HName
:local p3_3 String



:global p1_1 HName
:global p2_1 Rid
:global p2_2 HName
:global p2_3 String
:global in Bool
:global init_fl Bool


:initial
:var x
:cnj (= in FALSE)(= p1_1 NULL_HName)(= p2_1 NULL_Rid)(= p2_2 NULL_HName)(= p2_3 NULL_String)(= BookedRooms_1[x] NULL_Rid)(= BookedRooms_2[x] NULL_HName)(= BookedRooms_3[x] NULL_String)(= p3_1[x] NULL_Rid)(= p3_2[x] NULL_HName)(= p3_3[x] NULL_String)(= init_fl TRUE)

:u_cnj (not (= p2_1 NULL_Rid))(not (= p2_2 NULL_HName))(not (= p2_3 NULL_String))(= p2_1 BookedRooms_1[z1])(= p2_2 BookedRooms_2[z1])(= p2_3 BookedRooms_3[z1])
:u_cnj (not (= p3_1[z1] NULL_Rid))(not (= p3_2[z1] NULL_HName))(not (= p3_3[z1] NULL_String))(= p3_1[z1] BookedRooms_1[z2])(= p3_2[z1] BookedRooms_2[z2])(= p3_3[z1] BookedRooms_3[z2])

:eevar e HName   
:eevar d HName
:eevar f HName
:eevar g Rid
:eevar l Rid
:eevar m Rid
:eevar n String
:eevar o String
:eevar p String
:eevar q Bool


:comment Initialization


:comment T1
:transition
:var j
:var x
:guard  (= init_fl TRUE)(= x x)
:numcases 2
:case (= x j)
:val BookedRooms_1[j] 
:val BookedRooms_2[j] 
:val BookedRooms_3[j] 
:val p3_1[j] 
:val p3_2[j] 
:val p3_3[j]



:val p1_1 
:val p2_1
:val p2_2
:val p2_3
:val TRUE
:val FALSE

:case 

:val BookedRooms_1[j] 
:val BookedRooms_2[j] 
:val BookedRooms_3[j] 
:val p3_1[j] 
:val p3_2[j] 
:val p3_3[j]



:val p1_1
:val p2_1
:val p2_2
:val p2_3
:val TRUE
:val FALSE


:comment  Choose Hotel


:comment T2
:transition
:var j
:guard  (= init_fl FALSE)(not (= e NULL_HName))(= in TRUE)
:numcases 1
:case 
:val BookedRooms_1[j] 
:val BookedRooms_2[j] 
:val BookedRooms_3[j] 
:val p3_1[j] 
:val p3_2[j] 
:val p3_3[j]


:val e 
:val p2_1
:val p2_2
:val p2_3
:val FALSE
:val init_fl






:comment  ChooseRoom


:comment T3
:transition
:var j
:guard  (= init_fl FALSE)(not (= g NULL_Rid))(= (RidHName g) p1_1)
:numcases 1
:case
:val BookedRooms_1[j] 
:val BookedRooms_2[j] 
:val BookedRooms_3[j] 
:val p3_1[j] 
:val p3_2[j] 
:val p3_3[j]


:val NULL_HName
:val g
:val (RidHName g)
:val (RidType g)
:val in
:val init_fl






:comment  BookOnline


:comment T4
:transition
:var j
:var x
:guard  (= init_fl FALSE)(not (= p2_1 NULL_Rid))(not (= p2_2 NULL_HName))(not (= p2_3 NULL_String))(= BookedRooms_1[x] NULL_Rid)(= BookedRooms_2[x] NULL_HName)(= BookedRooms_3[x] NULL_String)(= p3_1[x] NULL_Rid)(= p3_2[x] NULL_HName)(= p3_3[x] NULL_String)
:numcases 2
:case (= x j)
:val p2_1 
:val p2_2 
:val p2_3
:val p3_1[j] 
:val p3_2[j] 
:val p3_3[j]


:val p1_1 
:val p2_1
:val p2_2
:val p2_3
:val in
:val init_fl


:case 
:val BookedRooms_1[j] 
:val BookedRooms_2[j] 
:val BookedRooms_3[j] 
:val p3_1[j] 
:val p3_2[j] 
:val p3_3[j]


:val p1_1 
:val p2_1
:val p2_2
:val p2_3
:val in
:val init_fl



:comment RedoBooking

:comment T5 
:transition
:var j
:var x
:var y
:guard  (= init_fl FALSE)(not (= x y))(= BookedRooms_1[y] NULL_Rid)(= BookedRooms_2[y] NULL_HName)(= BookedRooms_3[y] NULL_String)(= p3_1[y] NULL_Rid)(= p3_2[y] NULL_HName)(= p3_3[y] NULL_String)(not (= BookedRooms_1[x] NULL_Rid))(not (= BookedRooms_2[x] NULL_HName))(not (= BookedRooms_3[x] NULL_String))(= p2_1 BookedRooms_1[x])(= p2_2 BookedRooms_2[x])(= p2_3 BookedRooms_3[x])
:numcases 3
:case (= x j)
:val NULL_Rid 
:val NULL_HName
:val NULL_String
:val p3_1[j] 
:val p3_2[j] 
:val p3_3[j]


:val p1_1
:val p2_1
:val p2_2
:val p2_3
:val TRUE
:val init_fl

:case  (= y j)

:val BookedRooms_1[x] 
:val BookedRooms_2[x] 
:val BookedRooms_3[x] 
:val p3_1[j] 
:val p3_2[j] 
:val p3_3[j]

:val p1_1
:val p2_1
:val p2_2
:val p2_3
:val TRUE
:val init_fl


:case  (not (= y j))(not (= x j))

:val BookedRooms_1[j] 
:val BookedRooms_2[j] 
:val BookedRooms_3[j] 
:val p3_1[j] 
:val p3_2[j] 
:val p3_3[j]


:val p1_1
:val p2_1
:val p2_2
:val p2_3
:val TRUE
:val init_fl





:comment  RequestOnSite


:comment T6
:transition
:var j
:var x
:guard  (= init_fl FALSE)(not (= g NULL_Rid))(= BookedRooms_1[x] NULL_Rid)(= BookedRooms_2[x] NULL_HName)(= BookedRooms_3[x] NULL_String)(= p3_1[x] NULL_Rid)(= p3_2[x] NULL_HName)(= p3_3[x] NULL_String)(not (= e NULL_Rid))(= (RidHName g) e)
:numcases 2
:case (= x j)
:val BookedRooms_1[j] 
:val BookedRooms_2[j] 
:val BookedRooms_3[j]  
:val g 
:val e
:val (RidType g) 


:val p1_1 
:val p2_1
:val p2_2
:val p2_3
:val in
:val init_fl

:case 
:val BookedRooms_1[j] 
:val BookedRooms_2[j] 
:val BookedRooms_3[j] 
:val p3_1[j] 
:val p3_2[j] 
:val p3_3[j]


:val p1_1 
:val p2_1
:val p2_2
:val p2_3
:val in
:val init_fl




:comment   RegisterRoom


:comment T7
:transition
:var j
:var x
:var y
:guard  (= init_fl FALSE)(not (= x y))(= BookedRooms_1[y] NULL_Rid)(= BookedRooms_2[y] NULL_HName)(= BookedRooms_3[y] NULL_String)(= p3_1[y] NULL_Rid)(= p3_2[y] NULL_HName)(= p3_3[y] NULL_String)(not (= p3_1[x] NULL_Rid))(not (= p3_2[x] NULL_HName))(not (= p3_3[x] NULL_String))
:numcases 3
:case (= x j)
:val BookedRooms_1[j] 
:val BookedRooms_2[j] 
:val BookedRooms_3[j] 
:val NULL_Rid
:val NULL_HName
:val NULL_String


:val p1_1 
:val p2_1
:val p2_2
:val p2_3
:val in
:val init_fl

:case  (= y j)

:val p3_1[x]  
:val p3_2[x]  
:val p3_3[x]  
:val p3_1[j] 
:val p3_2[j] 
:val p3_3[j]

:val p1_1
:val p2_1
:val p2_2
:val p2_3
:val in
:val init_fl


:case  (not (= y j))(not (= x j))

:val BookedRooms_1[j] 
:val BookedRooms_2[j] 
:val BookedRooms_3[j] 
:val p3_1[j] 
:val p3_2[j] 
:val p3_3[j]


:val p1_1 
:val p2_1
:val p2_2
:val p2_3
:val in
:val init_fl







































