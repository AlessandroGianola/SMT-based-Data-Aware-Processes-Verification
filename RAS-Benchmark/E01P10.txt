:comment Acquisition-following-RFQ


:index int

:comment ----- TYPES DESCLARATIONS -------

:smt (define-type Supplier) 
:smt (define-type Good) 
:smt (define-type Customer)
:smt (define-type Num)
:smt (define-type String)


:comment ---------- FUNCTIONS and PREDICATES -----------

:smt (define Sname::(-> Supplier String))
:smt (define G1::(-> Supplier Good))
:smt (define G2::(-> Supplier Good))
:smt (define G3::(-> Supplier Good))
:smt (define p1::(-> Supplier Num))
:smt (define p2::(-> Supplier Num))
:smt (define p3::(-> Supplier Num))
:smt (define Gname::(-> Good String))
:smt (define Cname::(-> Customer String))
:smt (define Crecord::(-> Customer String))

:smt (define No ::String)
:smt (define Yes ::String)
:smt (define AnalyzeRequest ::String)
:smt (define SelectingSupplier ::String)
:smt (define SupplierSelected ::String)
:smt (define ResultSent ::String)
:smt (define Acquired ::String)
:smt (define Good ::String)
:smt (define NoticeSent::String)

:db_driven 
:db_sorts Supplier Good Customer Num String 
:db_functions Sname G1 G2 G3 p1 p2 p3 Gname Cname Crecord  
:db_constants  No Yes AnalyzeRequest SelectingSupplier SupplierSelected
:db_constants ResultSent Acquired Good NoticeSent
:db_relations 


:local Cand Supplier
:local Log1 Customer
:local Log2 Good
:local Log3 Good
:local Log4 Good
:local Log5 String

:global T1_Cid Customer
:global T1_g1 Good
:global T1_g2 Good
:global T1_g3 Good
:global T1_Sid Supplier
:global T1_status String
:global T1_HasSupp String
:global T1_SuppResp String
:global T2_g1 Good
:global T2_g2 Good
:global T2_g3 Good
:global T2_Sid Supplier
:global T2_status String
:global flagReReq int
:global flagSendNo int
:global flagChooseSup int
:global actT2 bool






:smt (define (Guardia p::bool T2g1::Good T2g2::Good T2g3::Good T2Sid::Supplier )::bool (and  (=> (not (= T2g1 NULL_Good)) (or (and p (= (G1 T2Sid) T2g1)) (and p (= (G2 T2Sid) T2g1)) (and p (= (G3 T2Sid) T2g1)))) (=> (not (= T2g2 NULL_Good)) (or (and p (= (G1 T2Sid) T2g2)) (and p (= (G2 T2Sid) T2g2)) (and p (= (G3 T2Sid) T2g2)))) (=> (not (= T2g3 NULL_Good)) (or (and p (= (G1 T2Sid) T2g3)) (and p (= (G2 T2Sid) T2g3)) (and p (= (G3 T2Sid) T2g3)))) ))



:initial
:var x
:cnj (=  T1_Cid  NULL_Customer) (=  T1_g1  NULL_Good) (=  T1_g2  NULL_Good) (=  T1_g3  NULL_Good) (=  T1_Sid  NULL_Supplier) (=  T1_status  NULL_String) (= T1_HasSupp NULL_String) (= T1_SuppResp NULL_String) (= T2_g1 NULL_Good) (= T2_g2 NULL_Good) (= T2_g3 NULL_Good) (= T2_status NULL_String) (= T2_Sid NULL_Supplier) (= Cand[x] NULL_Supplier) (= Log1[x] NULL_Customer)(= Log2[x] NULL_Good)(= Log3[x] NULL_Good)(= Log4[x] NULL_Good)(= Log5[x] NULL_String) (= flagReReq 0) (= flagSendNo 0) (= flagChooseSup 0) (= actT2 false)

:u_cnj (= T1_status Acquired)(= T1_SuppResp No)

:eevar e Customer
:eevar d Good
:eevar f Good
:eevar g Good
:eevar h Supplier
:eevar l Customer
:eevar m String
:eevar n String
:eevar o String


:comment part1
:comment T1
:transition
:var j
:guard  (= flagReReq 0) (= flagSendNo 0) (= flagChooseSup 0)(= actT2 false) (not (= e NULL_Customer))
:numcases 1
:case  
 :val Cand[j]
 :val Log1[j] 
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 
 :val e
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val NULL_Supplier
 :val AnalyzeRequest
 :val NULL_String
 :val T1_SuppResp[j]
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val 1
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 
 
:comment T2
:transition
:var j
:guard  (= flagReReq 1)(= flagSendNo 0) (= flagChooseSup 0) (not (= d NULL_Good))
:numcases 1
:case 
 :val Cand[j]
 :val Log1[j] 
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 
 :val T1_Cid[j]
 :val d
 :val f
 :val g
 :val T1_Sid[j] 
 :val T1_status[j]
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j]
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val 0
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 
 :comment T3
:transition
:var j
:guard  (= flagReReq 1)(= flagSendNo 0) (= flagChooseSup 0) (not (= d NULL_Good))
:numcases 1
:case 
  :val Cand[j]
 :val Log1[j] 
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j] 
 :val T1_Cid[j]
 :val d
 :val NULL_Good
 :val NULL_Good
 :val T1_Sid[j] 
 :val T1_status[j]
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j]
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val 0
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 


:comment T4
:transition
:var j
:guard  (= flagReReq 1)(= flagSendNo 0) (= flagChooseSup 0) (not (= f NULL_Good))
:numcases 1
:case 
 :val Cand[j]
 :val Log1[j] 
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val T1_Cid[j]
 :val d
 :val f
 :val g
 :val T1_Sid[j] 
 :val T1_status[j]
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j]
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val 0
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 
 :comment T5
:transition
:var j
:guard  (= flagReReq 1)(= flagSendNo 0) (= flagChooseSup 0) (not (= f NULL_Good))
:numcases 1
:case 
 :val Cand[j]
 :val Log1[j] 
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val T1_Cid[j]
 :val NULL_Good
 :val f
 :val NULL_Good
 :val T1_Sid[j] 
 :val T1_status[j]
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j]
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val 0
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 
:comment T6
:transition
:var j
:guard  (= flagReReq 1)(= flagSendNo 0) (= flagChooseSup 0) (not (= g NULL_Good))
:numcases 1
:case 
:val Cand[j]
 :val Log1[j] 
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val T1_Cid[j]
 :val d
 :val f
 :val g
 :val T1_Sid[j] 
 :val T1_status[j]
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j]
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val 0
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 
:comment T7
:transition
:var j
:guard  (= flagReReq 1)(= flagSendNo 0) (= flagChooseSup 0) (not (= g NULL_Good))
:numcases 1
:case 
:val Cand[j]
 :val Log1[j] 
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j] 
 :val T1_Cid[j]
 :val NULL_Good
 :val NULL_Good
 :val g
 :val T1_Sid[j] 
 :val T1_status[j]
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j]
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val 0
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 


 
 

 :comment T_1 AnalyzeAcquisitionRequest 

:comment T8
:transition
:var j
:guard  (= flagChooseSup 0)(= flagSendNo 0)(= flagReReq 0)(= actT2 false) (=  T1_status AnalyzeRequest)  (not (= T1_Cid NULL_Customer))  (= (Crecord T1_Cid) Good) 
:numcases 1
:case 
:val Cand[j]
 :val Log1[j] 
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j] 
 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val SelectingSupplier
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j]
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 
 

 
:comment T_1 SendNoSuppliersNotice 


:comment T9
:transition
:var x
:var j
:guard  (= flagChooseSup 0) (= flagSendNo 0) (= flagReReq 0) (= actT2 false) (=  T1_status SupplierSelected) (= T1_Sid NULL_Supplier) (= NULL_Customer Log1[x]) 
:uguard (not (= Log1[j] T1_Cid))
:numcases 2
:case (= x j)
:val Cand[j]
 :val T1_Cid
 :val T1_g1[j]
 :val T1_g2[j]
 :val T1_g3[j]
 :val T1_HasSupp[j]
 
 :val e
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val NoticeSent
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j]
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val 1
 :val flagChooseSup
 :val actT2
 
:case 
:val Cand[j]
 :val Log1[j] 
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val e
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val NoticeSent
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val 1
 :val flagChooseSup
 :val actT2
 
:comment T10 // con e=NULL
:transition
:var x
:var j
:guard  (= flagChooseSup 0) (= flagSendNo 0) (= flagReReq 0) (= actT2 false) (=  T1_status SupplierSelected) (= T1_Sid NULL_Supplier) (= NULL_Customer Log1[x]) 
:uguard (not (= Log1[j] T1_Cid))
:numcases 2
:case (= x j)
:val Cand[j]
 :val T1_Cid 
 :val T1_g1
 :val T1_g2
 :val T1_g3
 :val T1_HasSupp

 :val NULL_Customer
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val NoticeSent
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j]
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val 1
 :val flagChooseSup
 :val actT2
 
:case 
 :val Cand[j]
 :val Log1[j] 
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 
 :val NULL_Customer
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val NoticeSent
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val 1
 :val flagChooseSup
 :val actT2
 
  




 :comment part 2
 
:comment T11
 :transition
:var x
:var j
:guard  (= flagChooseSup 0)(= flagSendNo 0)(= flagReReq 0) (= actT2 false) (= T1_SuppResp No) (= NULL_Customer Log1[x])  
:numcases 2
:uguard (not (= Log1[j] T1_Cid))
:case (= x j)
:val Cand[j]
 :val T1_Cid 
 :val T1_g1
 :val T1_g2
 :val T1_g3
 :val T1_HasSupp

 :val e
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val NoticeSent
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j]
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val 1
 :val flagChooseSup
 :val actT2
 
:case 
:val Cand[j]
 :val Log1[j] 
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j] 

 :val e
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val NoticeSent
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val 1
 :val flagChooseSup
 :val actT2
 
 
 :comment part 2
 
:comment T12 // con e=NULL
 :transition
:var x
:var j
:guard  (= flagChooseSup 0)(= flagSendNo 0)(= flagReReq 0) (= actT2 false) (= T1_SuppResp No) (= NULL_Customer Log1[x])  
:numcases 2
:uguard (not (= Log1[j] T1_Cid))
:case (= x j)
 :val Cand[j]
 :val T1_Cid 
 :val T1_g1
 :val T1_g2
 :val T1_g3
 :val T1_HasSupp

 :val NULL_Customer
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val NoticeSent
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j]
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val 1
 :val flagChooseSup
 :val actT2
 
:case 
 :val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j] 
 :val NULL_Customer
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val NoticeSent
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val 1
 :val flagChooseSup
 :val actT2
 
 :comment part3: 
:comment T13
:transition
:var j
:guard  (= flagChooseSup 0)(= flagSendNo 1)(= flagReReq 0) 
:numcases 1
:case
:val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val T1_Cid[j]
 :val d
 :val f 
 :val g
 :val T1_Sid[j] 
 :val NoticeSent
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j]
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val 2
 :val flagChooseSup
 :val actT2

:comment T14
:transition
:var j
:guard  (= flagChooseSup 0)(= flagSendNo 1)(= flagReReq 0) 
:numcases 1
:case
:val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val T1_Cid[j]
 :val NULL_Good
 :val NULL_Good
 :val NULL_Good
 :val T1_Sid[j] 
 :val NoticeSent
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j]
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val 2
 :val flagChooseSup
 :val actT2
 

 
:comment part6:
:comment T15
:transition
:var j
:guard  (= flagChooseSup 0)(= flagSendNo 2)(= flagReReq 0)  
:numcases 1
:case 
 :val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val h
 :val T1_status
 :val n
 :val o
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val 0
 :val flagChooseSup
 :val actT2


:comment T16
:transition
:var j
:guard  (= flagChooseSup 0)(= flagSendNo 2)(= flagReReq 0)  
:numcases 1
:case 
 :val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val h
 :val T1_status
 :val NULL_String
 :val NULL_String
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val 0
 :val flagChooseSup
 :val actT2
 
:comment T17
:transition
:var j
:guard  (= flagChooseSup 0)(= flagSendNo 2)(= flagReReq 0)  
:numcases 1
:case 
 :val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val NULL_Supplier
 :val T1_status
 :val NULL_String
 :val NULL_String
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val 0
 :val flagChooseSup
 :val actT2
 



:comment T_1 SubmitResultToSupplier

:comment T18
:transition
:var j
:guard  (= flagChooseSup 0)(= flagSendNo 0)(= flagReReq 0)(= actT2 false)(=  T1_status SupplierSelected) (not (= T1_Sid NULL_Supplier)) 
:numcases 1
:case 
 :val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j] 
 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val ResultSent
 :val T1_HasSupp[j] 
 :val Yes
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 
:comment T19
:transition
:var j
:guard  (= flagChooseSup 0)(= flagSendNo 0)(= flagReReq 0)(= actT2 false)(=  T1_status SupplierSelected) (not (= T1_Sid NULL_Supplier)) 
:numcases 1
:case 
 :val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j] 
 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val ResultSent
 :val T1_HasSupp[j] 
 :val No
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 



:comment T_1 AcquireDeliverGood 

:comment T20
:transition
:var j
:guard  (= flagChooseSup 0)(= flagSendNo 0)(= flagReReq 0)(= actT2 false)(=  T1_SuppResp Yes) 
:numcases 1
:case 
:val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j] 
 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val Acquired 
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 


:comment T_2 opening 

:comment T21
:transition
:var j
:guard (= flagReReq 0)(= flagSendNo 0)(= flagChooseSup 0)(= actT2 false)(= T1_status SelectingSupplier) 
:numcases 1
:case 
:val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val T1_status[j] 
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val NULL_Supplier
 :val NULL_String
 :val flagReReq 
 :val flagSendNo
 :val flagChooseSup
 :val true
 

:comment T_2 AddSupplier 


:comment T22
:transition
:var x
:var j
:guard (= flagReReq 0) (= flagSendNo 0) (= flagChooseSup 0) (= actT2 true)   (= Cand[x] NULL_Supplier) (not (= h NULL_Supplier))    
:uguard (not (= Cand[j] T2_Sid))
:numcases 2
:case 
:val T2_Sid
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]

 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val T1_status[j] 
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val h
 :val T2_status[j]
 :val flagReReq
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 
:case 
:val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]

 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val T1_status[j] 
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val h
 :val T2_status[j]
 :val flagReReq 
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 

:comment T_2 ChooseSupplier 
 

:comment T23
:transition
:var x
:var j
:guard (= flagReReq 0)(= flagSendNo 0)(= flagChooseSup 0) (= actT2 true) (not (= Cand[x] NULL_Supplier))
:numcases 2
:case (= x j)
:val NULL_Supplier
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]

 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val T1_status[j] 
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val Cand[x]
 :val m
 :val flagReReq 
 :val flagSendNo
 :val 1
 :val actT2
 
:case 
:val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val T1_status[j] 
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val Cand[x]
 :val m
 :val flagReReq
 :val flagSendNo
 :val 1
 :val actT2

:comment T24
:transition
:var x
:var j
:guard (= flagReReq 0)(= flagSendNo 0)(= flagChooseSup 0) (= actT2 true) (not (= Cand[x] NULL_Supplier))
:numcases 2
:case (= x j)
:val NULL_Supplier
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val T1_status[j] 
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val Cand[x]
 :val NULL_String
 :val flagReReq 
 :val flagSendNo
 :val 1
 :val actT2
 
:case 
:val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val T1_status[j] 
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val Cand[x]
 :val NULL_String
 :val flagReReq
 :val flagSendNo
 :val 1
 :val actT2
 
 
:comment T25
:transition
:var j
:guard (= flagReReq 0)(= flagSendNo 0)(= flagChooseSup 1) (= actT2 true)(not  (= T2_Sid NULL_Supplier)) (Guardia true T2_g1 T2_g2 T2_g3 T2_Sid)
:numcases 1
:case 
 :val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val T1_status[j] 
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid[j]
 :val T2_status[j]
 :val flagReReq 
 :val flagSendNo
 :val 0
 :val actT2
 

:comment T_2 ChooseOptimalSupplier 

:comment T26
:transition
:var j
:guard (= flagReReq 0)(= flagSendNo 0)(= flagChooseSup 0) (= actT2 true)(= T2_status NULL_String)(not (= T2_Sid NULL_Supplier)) 
:numcases 1
:case 
:val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]
 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val T1_status[j] 
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid
 :val SupplierSelected
 :val flagReReq 
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 
 


:comment T_2 ChooseNoSupplier 

:comment T27
:transition
:var j
:guard (= flagReReq 0)(= flagSendNo 0)(= flagChooseSup 0) (= actT2 true)(= T2_status NULL_String)(= T2_Sid NULL_Supplier) 
:numcases 1
:case 
 :val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j] 
 :val T1_Cid[j]
 :val T1_g1[j] 
 :val T1_g2[j] 
 :val T1_g3[j] 
 :val T1_Sid[j] 
 :val T1_status[j] 
 :val T1_HasSupp[j] 
 :val T1_SuppResp[j] 
 :val T2_g1[j] 
 :val T2_g2[j] 
 :val T2_g3[j] 
 :val T2_Sid
 :val SupplierSelected
 :val flagReReq
 :val flagSendNo
 :val flagChooseSup
 :val actT2
 

 
 :comment T_2 closing 

 :comment T28
 :transition
 :var j
 :guard (= flagReReq 0)(= flagSendNo 0)(= flagChooseSup 0)(= actT2 true) (= T2_status SupplierSelected) 
 :numcases 1
 :case 
:val Cand[j]
 :val Log1[j]
 :val Log2[j]
 :val Log3[j]
 :val Log4[j]
 :val Log5[j]

  :val T1_Cid[j]
  :val T1_g1[j] 
  :val T1_g2[j] 
  :val T1_g3[j] 
  :val T2_Sid[j] 
  :val T2_status[j] 
  :val T1_HasSupp[j] 
  :val T1_SuppResp[j] 
  :val T2_g1[j] 
  :val T2_g2[j] 
  :val T2_g3[j] 
  :val T2_Sid[j]
  :val T2_status[j]
  :val flagReReq 
  :val flagSendNo
  :val flagChooseSup
  :val false
  
